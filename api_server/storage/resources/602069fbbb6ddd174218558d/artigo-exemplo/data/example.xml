<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE gcapaper PUBLIC "-//GCA//DTD GCAPAP-X DTD 20021024 Vers 6.2//EN" "gcapaper.dtd">
<gcapaper secnumbers="1">
  <front>
    <title>On the Writings of Software Engineers</title>
    <subt>A Unique Style of Communication</subt>
    <keyword>writing style</keyword>
    <keyword>engineer</keyword>
    <keyword>paper</keyword>
    <author>
      <fname>Philip A.</fname>
      <surname>Mansfield</surname>
      <suffix>Ph.D.</suffix>
      <jobtitle>President</jobtitle>
      <address>
        <affil>SchemaSoft</affil>
        <city>Vancouver</city>
        <stateorprovince>British Columbia</stateorprovince>
        <country>Canada</country>
        <email>philipm@schemasoft.com</email>
        <web>http://www.schemasoft.com</web>
      </address>
      <bio id="mansfield">
        <para>Philip's career has careened from general relativist to relative generalist, in diverse fits of focussed, obsessive activity.  His current obsession is <acronym.grp>
  <acronym refid="svg">SVG</acronym>
  <expansion id="svg">Scalable Vector Graphics</expansion>
</acronym.grp>, including organization of the <i>SVG Open 2003 Conference and Exhibition</i> (<a href="http://www.svgopen.org"/>), an act which he na&iuml;vely believed could be done in his spare time while not engaged in software engineering research, writing or business activities.</para>
      </bio>
    </author>
    <abstract>
      <para>The writing habits of software engineers are investigated, with a view toward understanding canonical modes of thought and communication among individuals.  A novel premise underlying this discussion is that software engineers actually have a writing style, and one that is no less valid than those attributable to recognized groups of writers such as journalists, playwrights, novelists or poets.</para>
    </abstract>
  </front>
  <body>
    <section id="justification">
      <title>The Justification for a Software Engineering Writing Style</title>
      <para>"Engineering style" may be considered an oxymoron, but then, to quote Dilbert
        <ftnote id="dilbert">
          <para><cit>Dilbert</cit> is a comic strip featuring a fictional character of the same name.  It is written by Scott Adams and distributed by United Feature Syndicate, Inc.  See <a href="http://www.dilbert.com/"/>.</para>
        </ftnote>,
      </para>
      <lquote>
        <para>Everyone is someone's weirdo.</para>
      </lquote>
      <para>It would be wrong to think that there should be a single manual of style applicable to all writing.  Indeed, <cit>The Complete Idiot's Guide to Grammar and Style</cit> <bibref refloc="idiot"/> should be considered just as "weird" to a software engineer as a software engineering manual of style would be to a complete idiot.</para>
    </section>
    <section id="observations">
      <title>Observations on the Writings of Software Engineers</title>
      <para/>
      <subsec1>
        <title>Ritual &amp; Symbolism</title>
        <para>If symbolic anthropologists were to study software engineers
        <ftnote id="anthropologist">
          <para>This study has not been done mainly because symbolic anthropologists spend too much time arguing with scientists and engineers to have studied any of them.</para>
        </ftnote>,
        they would probably find the usual elements of ritual and symbolism that define a culture.  An example ritual is multi-threaded, asynchronous group discussion over IRC.  Cultural symbols include <big><code>foo</code></big>, <big><code>bar</code></big>, <big><code>:-)</code></big> and most importantly, <big><code>/</code></big>, which is believed to be the root of all things.</para>
        <para>These examples have a direct bearing on modes of communication; for example, IRC enables software engineers to talk all at once without the familiar accusation of rudely interrupting.</para>
      </subsec1>
      <subsec1>
        <title>Principles of Software Engineering Communication</title>
        <para/>
        <subsec2 id="complexity">
          <title>Simplification of Complexity is Taboo</title>
          <para>The <acronym refid="svg">SVG</acronym> diagram in <xref refloc="communication"/> shows five key stages of software engineering communication and the sequences in which they occur.  However true understanding only comes with source code, provided here in <xref refloc="svgCode"/>.</para>
          <figure id="communication">
            <title>Software Engineering Communication Diagram</title>
            <figcaption>
              <para>Legend:
                <seqlist number="ualpha">
                  <li>
                    <para>Requirements</para>
                  </li>
                  <li>
                    <para>Design</para>
                  </li>
                  <li>
                    <para>Code</para>
                  </li>
                  <li>
                    <para>Bug Reports</para>
                  </li>
                  <li>
                    <para>Delivery Documents</para>
                  </li>
                </seqlist>
              </para>
            </figcaption>
            <graphic href="exampleGraphic1.svg" scalefit="1" width="6cm" height="6cm"/>
          </figure>
          <figure id="svgCode">
            <title>SVG Code for Communication Diagram</title>
            <code.block><![CDATA[<svg width="100%" height="100%" viewBox="0 0 100 100">
  <title>Communication Diagram</title>
  <defs>
    <style type="text/css"><![CDATA[
      .background {fill:gold}
      .label, .arrow {fill:indigo; font-size:16; font-weight:bold}
      .connector {fill:none; stroke-width:2.5; stroke:firebrick;
        stroke-linejoin:bevel}
    ]]>]]&gt;<![CDATA[</style>
  </defs>
  <rect class="background" width="100" height="100"/>
  <g class="label">
    <text x="9" y="88">A</text>
    <text x="62" y="22">B</text>
    <text x="44" y="88">C</text>
    <text x="26" y="22">D</text>
    <text x="79" y="88">E</text>
  </g>
  <polyline class="connector" points="20,73 65,27 50,73 35,27 80,73"/>
  <polygon class="arrow" points="-4.5,-4.5 4.5,0 -4.5,4.5">
    <animateMotion rotate="auto" dur="16s" repeatCount="indefinite"
      path="M20,73L65,27L50,73L65,27L50,73L35,27L50,73L35,27L80,73"/>
  </polygon>
</svg>]]></code.block>
          </figure>
          <para>If one were to try to summarize the meaning of this code, one would invariably have to change its meaning.  For example, you can't expect the motion path to retain its meaning if you remove every second coordinate pair from the list shown in bold below:</para>
          <code.block><![CDATA[    <animateMotion rotate="auto" dur="16s" repeatCount="indefinite"
      path="]]><b>M20,73L65,27L50,73L65,27L50,73L35,27L50,73L35,27L80,73</b><![CDATA["/>
]]></code.block>
          <para>Likewise, any simplification of inherent complexity is forbidden among software engineers, since truth is more important than being able to tell a good story.  In fact, software engineers practise a number of techniques to preserve and enhance complexity, as documented in the following sections.</para>
          <subsec3>
            <title>Maximize Features</title>
            <para>Software engineers believe it is more important to take advantage of all available features of a given computer language or application than it is to make consistent use of a subset of features.  For instance, this document's real purpose is to:
              <seqlist>
                <li>
                  <para>Show off all the features of the gcapaper XML language <bibref refloc="gcapaper"/>:</para>
                  <seqlist number="lroman">
                    <title>A sampling of features</title>
                    <li>
                      <randlist>
                        <title>Nested, titled lists</title>
                        <li>
                          <deflist>
                            <title>A definition list</title>
                            <def.item>
                              <def.term>List</def.term>
                              <def>
                                <para>A sequence of items</para>
                              </def>
                            </def.item>
                            <def.item>
                              <def.term>Item</def.term>
                              <def>
                                <para>A sequence of paragraphs and lists</para>
                              </def>
                            </def.item>
                          </deflist>
                        </li>
                        <li>
                          <para>Unordered lists</para>
                          <randlist style="simple">
                            <li>
                              <para>with multiple items</para>
                            </li>
                            <li>
                              <para>but no bullets</para>
                            </li>
                          </randlist>
                        </li>
                        <li>
                          <para>and...</para>
                          <para>multiple paragraphs in a single list item</para>
                        </li>
                      </randlist>
                    </li>
                    <li>
                      <para>Basic inline <i>styling</i> for things like <b>emphasis</b>, <small>size</small> or <code>code</code></para>
                      <para><tt>If teletype machines existed, they would look like this</tt></para>
                    </li>
                    <li>
                      <para>Features permitting you to write important equations like <i>e<sup>i&pi;</sup></i> + 1 = 0</para>
                    </li>
                    <li>
                      <para>Graphic elements for more gnarly equations like <graphic href="exampleGraphic2.svg" scalefit="1" width="444px" height="74px"/></para>
                    </li>
                    <li>
                      <para>Notes, such as the one about figures below</para>
                    </li>
                    <li>
                      <para>Tables, such as <xref refloc="figureContents"/></para>
                    </li>
                  </seqlist>
                </li>
                <li>
                  <para>Use the gcapaper language features in as many <i>combinations</i> as possible.  See <xref refloc="justification"/>, <xref refloc="observations"/>, all front matter and all appendices.</para>
                </li>
              </seqlist>
            </para>
            <note>
              <para>Items of the types listed in <xref refloc="figureContents"/>, when placed inside a figure, can be numbered, titled, given a caption and referenced; for example, <xref refloc="communication"/>, in <xref refloc="complexity"/>.  Inline items such as this image <inline.graphic href="exampleGraphic3.png"/> cannot.</para>
            </note>
            <table id="figureContents">
              <caption>gcapaper elements that can be placed inside a <code>&lt;figure&gt;</code> element</caption>
              <thead>
                <tr>
                  <th/>
                  <th>Element</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tfoot>
                <tr>
                  <td colspan="3">Optional &lt;title&gt; and &lt;figcaption&gt; elements are also allowed inside &lt;figure&gt;.</td>
                </tr>
              </tfoot>
              <tbody>
                <tr>
                  <td align="center">
                    <graphic href="exampleGraphic3.png" width="32" height="32"/>
                  </td>
                  <td align="center">&lt;graphic&gt;</td>
                  <td>Points to an SVG, PNG, JPEG, GIF or BMP image file</td>
                </tr>
                <tr>
                  <td align="center">
                    <graphic href="exampleGraphic4.png" width="32" height="32"/>
                  </td>
                  <td align="center">&lt;code.block&gt;</td>
                  <td>Code block, formatted in monospace font, preserving white space</td>
                </tr>
                <tr>
                  <td align="center">
                    <graphic href="exampleGraphic5.png" width="32" height="32"/>
                  </td>
                  <td align="center">&lt;para&gt;</td>
                  <td>Paragraph</td>
                </tr>
              </tbody>
            </table>
          </subsec3>
          <subsec3 id="digression">
            <title>Digression for Precision's Sake</title>
            <para id="digressionPara">Software engineers believe in precision, and will therefore include every fact relevant to the point being made &mdash; even if this leads to a run-on sentence with lots of commas, dashes and parentheses (which may even be nested (up to any level (with cross-references (especially self-reference, as you can see in <xref refloc="digression"/>, or alternatively <xref refloc="digressionPara"/> (which is less useful than a section reference because paragraph numbers are not normally shown in a rendered document))))).</para>
          </subsec3>
          <subsec3>
            <title>Repeat Nothing</title>
            <para>Whereas the mantra of other writers might be "repetition for emphasis", engineers believe in efficiency, and will never repeat an assertion, no matter how important or <sub>deeply hidden</sub> it is.</para>
          </subsec3>
        </subsec2>
        <subsec2>
          <title>First Things Last</title>
          <para>Software engineers tend to think in terms of sequential processes, and the outcome of a sequential process comes last.  Whereas goals are normally stated first by other writers, consistent with a priority-based ordering, they are often stated last by software engineers.  Fortunately, software engineers also begin reading a document at the end if they want to know what it is all about, so there is no problem with communication among like-minded colleagues.</para>
        </subsec2>
      </subsec1>
    </section>
  </body>
  <rear>
    <acknowl>
      <para>The author is grateful to Dilbert <fnref refloc="dilbert"/> and to the following groups of individuals for unwittingly serving as subjects of study:</para>
      <title>SchemaSoft Engineers</title>
      <para>To avoid causing embarrassment, I will not mention the specific names of those of my colleagues who have mastered the unique engineers' style of communication, except to claim that <xref refloc="mansfield"/> is definitely not on the list.</para>
      <title>W3C <acronym refid="svg">SVG</acronym> Working Group</title>
      <para>Participation on the World Wide Web Consortium <acronym refid="svg">SVG</acronym> Working Group has been a fascinating exercise in <i>design by committee</i>, and one that is quite revealing when it comes to engineering communications.  See <a href="http://www.w3.org/Graphics/SVG/"/>.</para>
    </acknowl>
    <bibliog>
      <bibitem id="idiot">
        <bib>IDIOT</bib>
        <pub><i>The Complete Idiot's Guide to Grammar and Style</i>, Laurie E. Rozakis, Alpha Books, Sept. 1997.  ISBN 0028619560.</pub>
      </bibitem>
      <bibitem id="gcapaper">
        <bib>GCAPAPER</bib>
        <pub><i>gcapaper format</i>, created and maintained by IDEAlliance (<a href="http://www.idealliance.org"/>) for use by conference paper authors.</pub>
      </bibitem>
    </bibliog>
  </rear>
</gcapaper>
